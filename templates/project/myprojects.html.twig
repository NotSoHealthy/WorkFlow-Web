{% extends 'layout.html.twig' %}

{% block title %}üìÇ Projets de Mon D√©partement{% endblock %}

{% block stylesheets %}
{{ parent() }}
<style>
.project-wrapper {
    padding: 3rem;
}
.project-box {
    background: white;
    border-radius: 1.2rem;
    padding: 2rem;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.06);
    border-left: 6px solid #e2e8f0;
    position: relative;
    margin-bottom: 2rem;
    cursor: pointer;
}
.project-box .header {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    margin-bottom: 1rem;
}
.project-box h2 {
    font-size: 1.6rem;
    font-weight: 700;
    margin: 0;
    color: #1e293b;
}
.state-badge {
    padding: 6px 16px;
    border-radius: 12px;
    font-weight: 700;
    font-size: 0.85rem;
    color: white;
    text-transform: uppercase;
    box-shadow: 0 2px 5px rgba(0,0,0,0.1);
}
.state-en-cours { background: #facc15; color: black; }
.state-termine { background: #22c55e; }
.state-annule { background: #ef4444; }

.meta-item {
    font-size: 1rem;
    color: #334155;
    margin-bottom: 0.6rem;
    display: flex;
    align-items: center;
}

.description-box {
    margin-top: 1.2rem;
    background: #f8fafc;
    border-left: 4px solid #3b82f6;
    padding: 1rem;
    border-radius: 8px;
    display: flex;
    align-items: flex-start;
    font-size: 0.96rem;
    color: #1e293b;
}

.section-title {
    font-size: 2rem;
    font-weight: 800;
    text-align: center;
    margin-bottom: 2.5rem;
    color: #1e293b;
}

/* Task Modal */
.task-card {
    background: #ffffff;
    border-radius: 12px;
    box-shadow: 0 4px 12px rgba(0,0,0,0.07);
    padding: 1rem;
    margin-bottom: 1rem;
    transition: 0.2s ease-in-out;
}
.task-card:hover {
    transform: translateY(-2px);
}
.task-title {
    font-weight: 600;
    font-size: 1.1rem;
    color: #1e293b;
}
.task-description {
    font-size: 0.95rem;
    color: #475569;
    margin-top: 6px;
}

.task-card-actions {
    margin-top: 10px;
    display: flex;
    justify-content: flex-end;
    gap: 8px;
}

.task-btn {
    border: none;
    padding: 6px 10px;
    font-size: 0.85rem;
    border-radius: 8px;
    color: white;
}
.task-btn.delete {
    background-color: #ef4444;
}
.task-btn.edit {
    background-color: #facc15;
    color: #1f2937;
}

/* Columns */
.task-column {
    min-height: 300px;
    padding: 10px;
    background: #f1f5f9;
    border-radius: 10px;
}
.card-header {
    border-radius: 10px 10px 0 0;
}
</style>
{% endblock %}

{% block main %}
<main>
    <div class="project-wrapper">
        <h2 class="section-title">üìÇ Projets de Mon D√©partement</h2>

        {% for project in projects %}
            <div class="project-box" onclick="openTaskModal({{ project.id }}, '{{ project.Name|e('js') }}')">
                <div class="header">
                    <h2>{{ project.Name }}</h2>
                    <div class="state-badge
                        {% if project.State == 'en cours' %}state-en-cours
                        {% elseif project.State == 'termin√©' %}state-termine
                        {% elseif project.State == 'annul√©' %}state-annule
                        {% endif %}">{{ project.State|upper }}</div>
                </div>

                <div class="meta-item"><strong>üëî Manager :</strong>&nbsp;{{ project.manager.first_name }}</div>
                <div class="meta-item"><strong>üìÖ D√©but :</strong>&nbsp;{{ project.StartDate|date('Y-m-d') }}</div>
                <div class="meta-item"><strong>üìÖ Fin :</strong>&nbsp;{{ project.EndDate|date('Y-m-d') }}</div>
                <div class="meta-item"><strong>üí∂ Budget :</strong>&nbsp;{{ project.Budget }} ‚Ç¨</div>

                <div class="description-box">
                    <i class="fas fa-align-left"></i> {{ project.Description }}
                </div>
            </div>
        {% else %}
            <div class="alert alert-warning text-center">Aucun projet trouv√© pour votre d√©partement.</div>
        {% endfor %}
    </div>

    <!-- Task Modal -->
    <div id="task-modal" style="display:none; position:fixed; top:50%; left:50%; transform: translate(-50%, -50%); background:white; padding:2rem; border-radius:10px; width:90%; max-width:1100px; height:90%; overflow:auto; z-index:1050; box-shadow:0 10px 30px rgba(0,0,0,0.2);">
        <div class="d-flex justify-content-between mb-4">
            <h2 id="modal-project-title"></h2>
            <div>
                <button class="btn btn-success btn-sm" data-bs-toggle="modal" data-bs-target="#addTaskModal">‚ûï Ajouter</button>
                <button onclick="closeTaskModal()" class="btn btn-danger btn-sm">Fermer ‚úñÔ∏è</button>
            </div>
        </div>
        <div id="task-board" class="row gy-4"></div>
    </div>

    <!-- Add Task Modal -->
    <div class="modal fade" id="addTaskModal" tabindex="-1" aria-labelledby="addTaskModalLabel" aria-hidden="true">
      <div class="modal-dialog modal-lg modal-dialog-scrollable">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">‚ûï Nouvelle T√¢che</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            {% include 'task/_form.html.twig' with {form: add_task_form, project: current_project} %}
          </div>
        </div>
      </div>
    </div>
</main>
{% endblock %}

{% block javascripts %}
{{ parent() }}

<script>
    // Cette variable doit √™tre accessible globalement AVANT le DOMContentLoaded
    const updateTaskStatusUrl = '{{ path("task_update_status") }}';
</script>

<script src="https://cdn.jsdelivr.net/npm/sortablejs@1.15.0/Sortable.min.js"></script>

<script>
document.addEventListener("DOMContentLoaded", () => {

    window.openTaskModal = function(projectId, projectName) {
        const modal = document.getElementById('task-modal');
        if (modal.style.display === 'block') return;

        document.querySelector('#addTaskModal form').setAttribute('action', '/task/' + projectId);
        modal.setAttribute('data-project-id', projectId);
        modal.style.display = 'block';
        document.getElementById('modal-project-title').textContent = "üìã " + projectName;

        fetch('/project/' + projectId + '/tasks/json')
            .then(response => response.json())
            .then(data => {
                const board = document.getElementById('task-board');
                board.innerHTML = '';
                const statuses = {
                    'To Do': '√Ä faire',
                    'In Progress': 'En cours',
                    'Completed': 'Termin√©',
                    'Blocked': 'Bloqu√©'
                };
                for (const [key, label] of Object.entries(statuses)) {
                    const col = document.createElement('div');
                    col.className = 'col-md-3';
                    col.innerHTML = `
                        <div class="card">
                            <div class="card-header text-center bg-primary text-white font-weight-bold">${label}</div>
                            <div class="card-body task-column" id="column-${key.replace(' ', '-')}"></div>
                        </div>
                    `;
                    board.appendChild(col);
                }

                data.forEach(task => {
                    const taskDiv = document.createElement('div');
                    taskDiv.className = 'task-card';
                    taskDiv.setAttribute('data-id', task.id);
                    const shortDesc = task.description ? task.description.slice(0, 50) : '';
                    taskDiv.innerHTML = `
                        <div class="task-title">${task.title}</div>
                        <div class="task-description">${shortDesc}${task.description.length > 50 ? '...' : ''}</div>
                        <div class="task-card-actions">
                            <button class="task-btn delete" onclick="deleteTask(${task.id}, ${projectId})">üóëÔ∏è</button>
                            <button class="task-btn edit" onclick="editTask(${task.id})">‚úèÔ∏è</button>
                        </div>
                    `;
                    const colBody = document.getElementById('column-' + task.status.replace(' ', '-'));
                    if (colBody) colBody.appendChild(taskDiv);
                });

                document.querySelectorAll('.task-column').forEach(function (column) {
                    new Sortable(column, {
                        group: 'tasks',
                        animation: 150,
                        onEnd: function (evt) {
                            const taskId = evt.item.getAttribute('data-id');
                            const newColumn = evt.to.id.replace('column-', '');
                            const statusMapping = {
                                'To-Do': 'To Do',
                                'In-Progress': 'In Progress',
                                'Completed': 'Completed',
                                'Blocked': 'Blocked'
                            };
                            const statusEnglish = statusMapping[newColumn] ?? newColumn.replace('-', ' ');

                            fetch(updateTaskStatusUrl, {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json',
                                    'X-Requested-With': 'XMLHttpRequest'
                                },
                                body: JSON.stringify({ id: taskId, status: statusEnglish })
                            })
                            .then(res => {
                                if (!res.ok) throw new Error("Erreur HTTP");
                                return res.json();
                            })
                            .then(data => {
                                console.log('‚úÖ Statut mis √† jour:', data);
                            })
                            .catch(error => {
                                console.error('Erreur:', error);
                            });
                        }
                    });
                });
            })
            .catch(error => {
                console.error('Erreur chargement t√¢ches:', error);
            });
    };

    window.closeTaskModal = () => {
        document.getElementById('task-modal').style.display = 'none';
    };

    window.deleteTask = (taskId, projectId) => {
        if (!confirm('Es-tu s√ªr de vouloir supprimer cette t√¢che ?')) return;

        fetch(`/task/delete/${taskId}`, {
            method: 'POST'
        })
        .then(res => {
            if (res.ok) {
                document.querySelector(`[data-id="${taskId}"]`).remove();
                console.log('‚úÖ T√¢che supprim√©e');
            } else {
                console.error('‚ùå √âchec de suppression');
            }
        })
        .catch(err => {
            console.error('Erreur r√©seau:', err);
        });
    };
});
</script>
{% endblock %}


