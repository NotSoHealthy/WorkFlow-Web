{% extends 'layout.html.twig' %}

{% block title %}Offres d'emploi{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        :root {
            --primary-color: #1a73e8; /* Blue for Modifier */
            --secondary-color: #f44336; /* Red for Supprimer */
            --accent-color: #4caf50; /* Green for Voir candidatures */
            --background-color: #f5f7fa;
            --card-bg: #ffffff;
            --text-color: #333;
            --border-color: #e0e0e0;
            --font-family: 'Inter', sans-serif;
        }

        body {
            font-family: var(--font-family);
            background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
            color: var(--text-color);
            margin: 0;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 40px 20px;
        }

        h2 {
            text-align: center;
            font-size: 2.2rem;
            font-weight: 700;
            margin-bottom: 40px;
            color: var(--text-color);
        }

        .btn-create {
            display: inline-block;
            padding: 12px 24px;
            background-color: var(--primary-color);
            color: #fff;
            text-decoration: none;
            border-radius: 8px;
            font-weight: 600;
            transition: background-color 0.3s ease, transform 0.2s ease;
            margin-bottom: 30px;
        }

        .btn-create:hover {
            background-color: #1557b0;
            transform: translateY(-2px);
        }

        .filter-sort-container {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

        .filter-sort-container input,
        .filter-sort-container select {
            padding: 10px;
            border: 1px solid var(--border-color);
            border-radius: 5px;
            font-size: 1rem;
            background-color: var(--card-bg);
            transition: border-color 0.3s ease;
        }

        .filter-sort-container input:focus,
        .filter-sort-container select:focus {
            border-color: var(--primary-color);
            outline: none;
        }

        .filter-sort-container input {
            width: 70%;
        }

        .filter-sort-container select {
            width: 25%;
        }

        .job-offer-list {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 20px;
        }

        .job-offer-card {
            background-color: var(--card-bg);
            border: 1px solid var(--border-color);
            border-left: 5px solid var(--primary-color);
            border-radius: 12px;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.05);
            padding: 20px;
            transition: transform 0.3s ease, box-shadow 0.3s ease;
        }

        .job-offer-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 6px 25px rgba(0, 0, 0, 0.1);
        }

        .job-offer-card h3 {
            font-size: 1.5rem;
            font-weight: 700;
            color: var(--primary-color);
            margin-bottom: 15px;
        }

        .job-offer-card p {
            font-size: 0.95rem;
            color: #555;
            margin-bottom: 10px;
        }

        .actions {
            display: flex;
            flex-wrap: wrap;
            justify-content: center;
            gap: 15px;
            margin-top: 20px;
        }

        /* Modern Hover-Underline Button Style */
        .cta {
            border: none;
            background: none;
            cursor: pointer;
            display: inline-block;
            padding: 0;
            font-family: inherit;
            text-decoration: none;
        }

        .cta span.hover-underline-animation {
            position: relative;
            padding-bottom: 7px;
            letter-spacing: 2px;
            font-size: 1rem;
            text-transform: uppercase;
            color: inherit;
        }

        .cta span.hover-underline-animation:after {
            content: "";
            position: absolute;
            width: 100%;
            transform: scaleX(0);
            height: 2px;
            bottom: 0;
            left: 0;
            background-color: currentColor;
            transform-origin: bottom right;
            transition: transform 0.25s ease-out;
        }

        .cta:hover span.hover-underline-animation:after {
            transform: scaleX(1);
            transform-origin: bottom left;
        }

        /* Button Variants */
        .btn-edit {
            color: var(--primary-color);
        }
        .btn-delete {
            color: var(--secondary-color);
        }
        .btn-view {
            color: var(--accent-color);
        }

        /* Optional: When card border changes based on status */
        .job-offer-card.status-open {
            border-left-color: var(--accent-color);
        }
        .job-offer-card.status-in-progress {
            border-left-color: #ff9800;
        }
        .job-offer-card.status-closed {
            border-left-color: var(--secondary-color);
        }

        .text-center {
            text-align: center;
        }
    </style>
{% endblock %}

{% block main %}
<main>
    <div class="container">
        <a href="{{ path('job_offer_wizard') }}" class="btn-create">Créer une Offre</a>
        <h2>Liste des Offres d'emploi</h2>
        <div class="filter-sort-container">
            <input type="text" id="search-input" placeholder="Rechercher par Offre d'emploi">
            <select id="sort-select">
                <option value="newest">Plus anciennes d'abord</option>
                <option value="oldest">Plus récentes d'abord</option>
            </select>
        </div>
        <div class="job-offer-list">
            {% for offer in jobOffers %}
                <div class="job-offer-card" id="job-offer-{{ offer.id }}" data-publication-date="{{ offer.publicationDate|date('Y-m-d') }}">
                    <h3>{{ offer.title }}</h3>
                    <p><strong>Description:</strong> {{ offer.description|length > 50 ? offer.description|slice(0, 50) ~ '...' : offer.description }}</p>
                    <p><strong>Date de publication:</strong> {{ offer.publicationDate|date('Y-m-d') }}</p>
                    <p><strong>Date d'expiration:</strong> {{ offer.expirationDate ? offer.expirationDate|date('Y-m-d') : 'N/A' }}</p>
                    <p><strong>Contrat:</strong> {{ offer.contractType }}</p>
                    <p><strong>Salaire:</strong> {{ offer.salary }}</p>
                    <div class="actions">
                        <a href="{{ path('job_offer_wizard', {'id': offer.id}) }}" class="cta btn-edit">
                            <span class="hover-underline-animation">Modifier</span>
                        </a>
                        <button class="cta btn-delete" onclick="deleteOffer('{{ offer.id }}')">
                            <span class="hover-underline-animation">Supprimer</span>
                        </button>
                        <a href="{{ path('app_application_list', {'id': offer.id}) }}" class="cta btn-view">
                            <span class="hover-underline-animation">Voir candidatures</span>
                        </a>
                    </div>
                </div>
            {% else %}
                <p class="text-center">Aucune offre d'emploi disponible pour le moment.</p>
            {% endfor %}
        </div>
    </div>
</main>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script>
        function deleteOffer(id) {
            fetch(`{{ path('job_offer_delete', {'id': 'ID_PLACEHOLDER'}) }}`.replace('ID_PLACEHOLDER', id), {
                method: 'DELETE',
                headers: {
                    "X-Requested-With": "XMLHttpRequest"
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    document.getElementById("job-offer-" + id).remove();
                } else {
                    alert("Erreur de suppression");
                }
            })
            .catch(error => console.error('Erreur:', error));
        }

        document.addEventListener('DOMContentLoaded', function() {
            const searchInput = document.getElementById('search-input');
            const sortSelect = document.getElementById('sort-select');
            const cards = document.querySelectorAll('.job-offer-card');
            const container = document.querySelector('.job-offer-list');

            // Filtering by job title
            searchInput.addEventListener('keyup', function() {
                const searchTerm = this.value.toLowerCase();
                cards.forEach(card => {
                    const title = card.querySelector('h3').textContent.toLowerCase();
                    card.style.display = title.includes(searchTerm) ? 'block' : 'none';
                });
            });

            // Sorting by publication date
            sortSelect.addEventListener('change', function() {
                const sortBy = this.value;
                const cardsArray = Array.from(cards);
                cardsArray.sort((a, b) => {
                    const dateA = new Date(a.dataset.publicationDate);
                    const dateB = new Date(b.dataset.publicationDate);
                    return sortBy === 'newest' ? dateB - dateA : dateA - dateB;
                });
                container.innerHTML = '';
                cardsArray.forEach(card => container.appendChild(card));
            });

            // Set default sort to newest on page load
            sortSelect.value = 'newest';
            sortSelect.dispatchEvent(new Event('change'));
        });
    </script>
{% endblock %}
