{% extends 'base.html.twig' %}

{% block title %}Interview Index{% endblock %}

{% block body %}
    <style>
        .modal .close {
            font-size: 1.5rem;
            color: #000;
            opacity: 0.5;
            width: auto;
            padding: 0;
            margin: 0;
        }
        .modal .close:hover {
            opacity: 0.8;
            color: #000;
        }
        .interview-btn {
            background-color: #1a73e8;
            color: white;
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }
        .interview-btn:hover {
            background-color: #1565c0;
        }
        .error {
            color: #dc3545;
            font-size: 0.9rem;
            margin-top: 5px;
            font-style: italic;
        }
    </style>

    <h1>Interview Index</h1>

    <table class="table table-striped table-hover table-bordered">
        <thead class="thead-dark">
            <tr>
                <th>Id</th>
                <th>Interview Date</th>
                <th>Location</th>
                <th>Feedback</th>
                <th>Status</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
        {% for interview in interviews %}
            <tr>
                <td>{{ interview.id }}</td>
                <td>{{ interview.interviewDate ? interview.interviewDate|date('Y-m-d H:i') : '' }}</td>
                <td>{{ interview.location }}</td>
                <td>{{ interview.feedback }}</td>
                <td>{{ interview.status }}</td>
                <td>
                    <a href="{{ path('app_interview_show', {'id': interview.id}) }}" class="btn btn-sm btn-info">Show</a>
                    <a href="{{ path('app_interview_edit', {'id': interview.id}) }}" class="btn btn-sm btn-primary">Edit</a>
                </td>
            </tr>
        {% else %}
            <tr>
                <td colspan="6" class="text-center">No records found</td>
            </tr>
        {% endfor %}
        </tbody>
    </table>

    <button class="interview-btn" data-application-id="1">Schedule Interview</button>

    <div class="modal fade" id="interviewModal" tabindex="-1" role="dialog" aria-labelledby="interviewModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="interviewModalLabel">Schedule Interview</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <!-- Form will be loaded here via AJAX -->
                </div>
            </div>
        </div>
    </div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script src="https://code.jquery.com/jquery-3.6.0.min.js" crossorigin="anonymous"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js" crossorigin="anonymous"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const modal = document.getElementById('interviewModal');
            const modalBody = modal.querySelector('.modal-body');

            document.querySelectorAll('.interview-btn').forEach(button => {
                button.addEventListener('click', function () {
                    const applicationId = this.dataset.applicationId;

                    fetch(`/interview/new/${applicationId}`, {
                        headers: { 'X-Requested-With': 'XMLHttpRequest' }
                    })
                    .then(response => response.text())
                    .then(html => {
                        modalBody.innerHTML = html;
                        $(modal).modal('show');
                        bindFormValidation(modalBody.querySelector('form'));
                    })
                    .catch(error => {
                        console.error('Form Load Error:', error);
                        alert('Failed to load the interview form.');
                    });
                });
            });

            function bindFormValidation(form) {
                const dateInput = form.querySelector('#interview_interviewDate');
                const locationInput = form.querySelector('#interview_location');
                const feedbackInput = form.querySelector('#interview_feedback');
                const statusInput = form.querySelector('#interview_status');

                form.addEventListener('submit', function (e) {
                    e.preventDefault();
                    clearErrors();

                    let hasError = false;

                    if (!dateInput.value.trim()) {
                        showError(dateInput, "Date is required.");
                        hasError = true;
                    }
                    if (!locationInput.value.trim()) {
                        showError(locationInput, "Location is required.");
                        hasError = true;
                    }
                    if (!feedbackInput.value.trim()) {
                        showError(feedbackInput, "Feedback is required.");
                        hasError = true;
                    }
                    if (!statusInput.value.trim()) {
                        showError(statusInput, "Status is required.");
                        hasError = true;
                    }

                    if (hasError) return;

                    const formData = new FormData(form);

                    fetch(form.action, {
                        method: 'POST',
                        body: formData,
                        headers: { 'X-Requested-With': 'XMLHttpRequest' }
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            $(modal).modal('hide');
                            alert('Interview scheduled successfully!');
                            location.reload();
                        } else {
                            alert('Server error: ' + (data.errors || 'Unknown error'));
                        }
                    })
                    .catch(error => {
                        console.error('Submit Error:', error);
                        alert('An error occurred while scheduling the interview.');
                    });
                });

                function showError(input, message) {
                    const div = document.createElement('div');
                    div.className = 'error';
                    div.innerText = message;
                    input.parentNode.appendChild(div);
                }

                function clearErrors() {
                    form.querySelectorAll('.error').forEach(e => e.remove());
                }
            }
        });
    </script>
{% endblock %}
