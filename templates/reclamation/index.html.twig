{% extends 'layout.html.twig' %}

{% block title %}Réclamations{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <style>
        .container {
            max-width: 100%;
            margin: 0 auto;
            padding: 0 20px;
        }
        .filter-sort-container {
            display: flex;
            gap: 15px;
            margin-bottom: 25px;
        }
        #search-input, #sort-select, #status-select {
            padding: 10px;
            border: 1px solid var(--border-color);
            border-radius: 6px;
            width: 100%;
        }
        .reclamation-grid {
            display: grid;
            margin-top: 50px;
            grid-template-columns: repeat(auto-fit, 490px);
            gap: 50px;
            margin-left: 50px;
        }
        .reclamation-card {
            background: var(--card-bg);
            border: 1px solid var(--border-color);
            border-radius: 10px;
            padding: 20px;
            box-shadow: 0 3px 6px rgba(0,0,0,0.1);
            transition: transform 0.3s, box-shadow 0.3s;
        }
        .reclamation-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 6px 12px rgba(0,0,0,0.15);
        }
        .reclamation-card.ouvert { border-left: 6px solid var(--bs-success); }
        .reclamation-card.en-cours { border-left: 6px solid var(--bs-primary); }
        .reclamation-card.en-attente { border-left: 6px solid var(--bs-warning); }
        .reclamation-card.ferme { border-left: 6px solid var(--bs-danger); }
        .reclamation-card.rejete { border-left: 6px solid var(--bs-secondary); }
        .reclamation-card h3 {
            color: var(--primary-color);
            margin: 0 0 15px 0;
            font-size: 1.3rem;
        }
        .reclamation-card p {
            margin: 8px 0;
            font-size: 0.95rem;
        }
        .actions {
            display: flex;
            flex-direction: column;
            gap: 10px;
            margin-top: 15px;
            align-items: flex-start;
        }
        .cta {
            border: none;
            background: none;
            cursor: pointer;
            padding: 0;
            width: 100%;
            text-align: left;
        }
        .cta span {
            padding-bottom: 7px;
            letter-spacing: 2px;
            font-size: 14px;
            text-transform: uppercase;
            color: inherit;
            transition: color 0.3s ease;
            display: inline-block;
        }
        .hover-underline-animation {
            position: relative;
            padding-bottom: 5px;
        }
        .hover-underline-animation:after {
            content: "";
            position: absolute;
            width: 100%;
            transform: scaleX(0);
            height: 2px;
            bottom: 0;
            left: 0;
            background-color: currentColor;
            transform-origin: bottom right;
            transition: transform 0.25s ease-out;
        }
        .cta:hover .hover-underline-animation:after {
            transform: scaleX(1);
            transform-origin: bottom left;
        }
        .cta:active {
            transform: scale(0.95);
        }
        .btn-view { color: rgb(13, 180, 206); }
        .manage-btn { color: rgb(24, 190, 113); }
        .btn-edit { color: #ffc107; }
        .btn-delete { color: #dc3545; }
        .cta:hover.btn-view { color: #138496; }
        .cta:hover.btn-edit { color: #e0a800; }
        .cta:hover.btn-delete { color: #c82333; }
        .modal-body h3 { color: var(--primary-color); }
        .modal-body p { margin: 12px 0; }
        .badge {
            padding: 6px 12px;
            border-radius: 14px;
            color: white;
            font-size: 0.85rem;
        }
        #sort-select {
            width: 250px;
            height: 40px;
            padding: 8px;
            font-size: 14px;
            border-radius: 6px;
            border: 1px solid var(--border-color);
        }
        .statbutton {
            width: 200px;
        }
        .badge-ouvert { background: var(--bs-success); }
        .badge-en-cours { background: var(--bs-primary); }
        .badge-en-attente { background: var(--bs-warning); }
        .badge-ferme { background: var(--bs-danger); }
        .badge-rejete { background: var(--bs-secondary); }
        .select-stat { width: 300px; }
    </style>
{% endblock %}

{% block main %}
    <main>
        <div class="container">
            <h1>Réclamations</h1>
            <a href="{{ path('app_reclamation_new') }}" class="btn btn-primary mb-4">Créer une nouvelle réclamation</a>
       
<div class="filter-sort-container">
    <div class="d-flex gap-3 w-100">
        <input type="text" id="search-input" class="form-control" placeholder="Rechercher par titre ou description" value="{{ searchTerm }}">
        <select id="sort-select" class="form-control">
            <option value="newest" {{ sort == 'newest' ? 'selected' : '' }}>Les plus récentes d'abord</option>
            <option value="oldest" {{ sort == 'oldest' ? 'selected' : '' }}>Les plus anciennes d'abord</option>
        </select>
        <select id="status-select" class="form-control select-stat">
            <option value="" {{ status == '' ? 'selected' : '' }}>Tous les états</option>
            <option value="Ouvert" {{ status == 'Ouvert' ? 'selected' : '' }}>Ouvert</option>
            <option value="En cours" {{ status == 'En cours' ? 'selected' : '' }}>En cours</option>
            <option value="En attente" {{ status == 'En attente' ? 'selected' : '' }}>En attente</option>
            <option value="Ferme" {{ status == 'Ferme' ? 'selected' : '' }}>Fermé</option>
            <option value="Rejete" {{ status == 'Rejete' ? 'selected' : '' }}>Rejeté</option>
        </select>
    </div>
    <button class="btn btn-outline-secondary d-flex align-items-center statbutton" data-bs-toggle="modal" data-bs-target="#statModal">
        <i class="bi bi-bar-chart-fill me-2"></i> Statistique
    </button>
</div>
            <hr>
            <div class="reclamation-grid" id="reclamations-container">
                {% include 'reclamation/_grid.html.twig' with {'reclamations': reclamations} %}
            </div>
        </div>

        <div class="modal fade" id="reclamationModal" tabindex="-1" aria-labelledby="reclamationModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="reclamationModalLabel">Détails de la réclamation</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                    </div>
                </div>
            </div>
        </div>

        <div class="modal fade" id="statModal" tabindex="-1" aria-labelledby="statModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-lg modal-dialog-centered">
                <div class="modal-content p-4">
                    <div class="modal-header">
                        <h5 class="modal-title w-100 text-center" id="statModalLabel">Statistiques</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Fermer"></button>
                    </div>
                    <div class="modal-body">
                        <div class="row text-center">
                            <div class="col-md-6">
                                <h6>Types de réclamations</h6>
                                <canvas id="typeChart"></canvas>
                            </div>
                            <div class="col-md-6">
                                <h6>Catégories de réclamations</h6>
                                <canvas id="categoryChart"></canvas>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="modal fade" id="manageModal" tabindex="-1" aria-labelledby="manageModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="manageModalLabel">Gérer la réclamation</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <div class="d-grid gap-2">
                            <button type="button" class="btn btn-outline-success status-btn" data-status="ouvert">Marquer comme Ouvert</button>
                            <button type="button" class="btn btn-outline-primary status-btn" data-status="enc_cours">Marquer comme En cours</button>
                            <button type="button" class="btn btn-outline-warning status-btn" data-status="en_attente">Marquer comme En attente</button>
                            <button type="button" class="btn btn-outline-danger status-btn" data-status="ferme">Marquer comme Fermé</button>
                            <button type="button" class="btn btn-outline-secondary status-btn" data-status="rejete">Marquer comme Rejeté</button>
                            <button type="button" class="btn btn-outline-dark resign-btn">Démissionner</button>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Fermer</button>
                    </div>
                </div>
            </div>
        </div>
    </main>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            
          
            let typeChart = null;
            let categoryChart = null;
            let currentReclamationId = null;
            
            
            const elements = {
                searchInput: document.getElementById('search-input'),
                sortSelect: document.getElementById('sort-select'),
                statusSelect: document.getElementById('status-select'),
                grid: document.querySelector('.reclamation-grid'),
                statModal: document.getElementById('statModal'),
                manageModal: new bootstrap.Modal(document.getElementById('manageModal'))
            };

           
            initFilters();
            initCharts({{ types|json_encode|raw }}, {{ categories|json_encode|raw }});
            attachEventListeners();

            function initFilters() {
                window.currentFilters = {
                    search: elements.searchInput.value,
                    sort: elements.sortSelect.value,
                    status: elements.statusSelect.value
                };
            }

            function attachEventListeners() {
                
                elements.searchInput.addEventListener('input', debounce(updateReclamations, 300));
                elements.searchInput.addEventListener('search', updateReclamations);
                elements.sortSelect.addEventListener('change', updateReclamations);
                elements.statusSelect.addEventListener('change', updateReclamations);
                
                document.addEventListener('click', function(e) {
                    if (e.target.closest('.view-btn')) {
                        showReclamationDetails(e.target.closest('.view-btn').dataset.id);
                        attachFormSubmitHandler()
                    }
                    if (e.target.closest('.manage-btn')) {
                        handleManageButton(e.target.closest('.manage-btn'), e);
                    }
                    if (e.target.closest('.status-btn')) {
                        updateStatus(e.target.closest('.status-btn').dataset.status);
                    }
                    if (e.target.closest('.resign-btn')) {
                        resignReclamation();
                    }
                });
            }

            async function updateReclamations() {
               
                window.currentFilters = {
                    search: elements.searchInput.value,
                    sort: elements.sortSelect.value,
                    status: elements.statusSelect.value
                };

                
                elements.grid.innerHTML = '<div class="text-center py-5"><div class="spinner-border"></div></div>';

                const url = new URL(window.location);
                Object.entries(window.currentFilters).forEach(([key, value]) => {
                    url.searchParams.set(key, value);
                });
                url.searchParams.set('ajax', '1');

                try {
                    const response = await fetch(url.toString());
                    if (!response.ok) throw new Error(`HTTP error: ${response.status}`);
                    
                    const data = await response.json();
                    if (!data.reclamationsHtml) throw new Error('Invalid response data');

                   
                    elements.grid.innerHTML = data.reclamationsHtml;
                    updateCharts(data.types, data.categories);
                    
                } catch (error) {
                    console.error('Fetch error:', error);
                    elements.grid.innerHTML = `
                        <div class="alert alert-danger text-center">
                            Error: ${error.message}
                        </div>`;
                }
            }

            
            function initCharts(types, categories) {
                createChart('typeChart', types, 'Types de réclamations');
                createChart('categoryChart', categories, 'Catégories de réclamations');
            }

            function updateCharts(types, categories) {
                updateChart('typeChart', types);
                updateChart('categoryChart', categories);
            }

            function createChart(chartId, data, title) {
                const ctx = document.getElementById(chartId)?.getContext('2d');
                if (!ctx) return;

                if (chartId === 'typeChart' && typeChart) typeChart.destroy();
                if (chartId === 'categoryChart' && categoryChart) categoryChart.destroy();

                const chart = new Chart(ctx, {
                    type: 'pie',
                    data: formatChartData(data),
                    options: {
                        responsive: true,
                        plugins: {
                            title: { display: true, text: title },
                            tooltip: {
                                callbacks: {
                                    label: function(context) {
                                        const total = context.dataset.data.reduce((a, b) => a + b, 0);
                                        const percent = Math.round((context.raw / total) * 100);
                                        return `${context.label}: ${context.raw} (${percent}%)`;
                                    }
                                }
                            }
                        }
                    }
                });

                if (chartId === 'typeChart') typeChart = chart;
                if (chartId === 'categoryChart') categoryChart = chart;
            }

            function updateChart(chartId, data) {
                const chart = chartId === 'typeChart' ? typeChart : categoryChart;
                if (chart) {
                    chart.data = formatChartData(data);
                    chart.update();
                }
            }

            function formatChartData(data) {
                return {
                    labels: Object.keys(data),
                    datasets: [{
                        data: Object.values(data),
                        backgroundColor: [
                            '#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF',
                            '#FF9F40', '#8AC24A', '#EA5F89', '#00ACC1', '#FF7043'
                        ],
                        borderWidth: 1
                    }]
                };
            }

            
function showReclamationDetails(id) {
    fetch(`/message/${id}/details`, {
        headers: {
            'X-Requested-With': 'XMLHttpRequest'
        }
    })
    .then(response => {
        if (!response.ok) {
            throw new Error(`HTTP error: ${response.status}`);
        }
        return response.text();
    })
    .then(html => {
        document.querySelector('#reclamationModal .modal-body').innerHTML = html;
        new bootstrap.Modal(document.getElementById('reclamationModal')).show();
     
        attachFormSubmitHandler();
    })
    .catch(error => {
        console.error('Details error:', error);
        alert('Erreur lors du chargement des détails.');
    });
}

            function handleManageButton(button, event) {
                currentReclamationId = button.dataset.id;
                if (button.querySelector('span')?.textContent.trim() === 'Prendre') {
                    event.preventDefault();
                    event.stopPropagation();
                    takeOwnership();
                }
            }

            async function takeOwnership() {
                try {
                    const response = await fetch(`/reclamation/${currentReclamationId}/take-ownership`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' }
                    });
                    const data = await response.json();
                    if (data.success) updateReclamations();
                } catch (error) {
                    console.error('Ownership error:', error);
                }
            }

            async function updateStatus(status) {
                try {
                    const response = await fetch(`/reclamation/${currentReclamationId}/update-status`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ status })
                    });
                    const data = await response.json();
                    if (data.success) updateReclamations();
                } catch (error) {
                    console.error('Status error:', error);
                }
            }

            async function resignReclamation() {
                try {
                    const response = await fetch(`/reclamation/${currentReclamationId}/resign`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' }
                    });
                    const data = await response.json();
                    if (data.success) updateReclamations();
                } catch (error) {
                    console.error('Resign error:', error);
                }
            }

           
            function debounce(func, wait) {
                let timeout;
                return function() {
                    const context = this, args = arguments;
                    clearTimeout(timeout);
                    timeout = setTimeout(() => func.apply(context, args), wait);
                };
            }

      function attachFormSubmitHandler() {
    const modal = document.getElementById('reclamationModal');
    if (!modal) return;

   
    let isProcessing = false;

    // Handle message form submission
    const messageForm = modal.querySelector('form[id="message-textarea"]');
    if (messageForm) {
        messageForm.addEventListener('submit', function(event) {
            if (isProcessing) return;
            isProcessing = true;
            event.preventDefault();
            const formData = new FormData(messageForm);
            
            const match = messageForm.action.match(/\/message\/(\d+)\/details/);
            const reclamationId = match ? match[1] : null;
            
            if (!reclamationId) {
                console.error('Could not extract reclamation ID from URL:', messageForm.action);
                alert('Erreur : Impossible d\'extraire l\'ID de la réclamation.');
                isProcessing = false;
                return;
            }
            
            const searchInput = document.querySelector('#search-form input[name="search"]');
            const searchQuery = searchInput ? searchInput.value : '';
            if (searchQuery) {
                formData.append('search', searchQuery);
            }
            
            fetch(messageForm.action, {
                method: 'POST',
                body: formData,
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                }
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`Network response was not ok: ${response.status}`);
                }
                return response.text();
            })
            .then(html => {
                const modalBody = document.querySelector('#reclamationModal .modal-body');
                modalBody.innerHTML = html;
                attachFormSubmitHandler();
                const searchInput = document.querySelector('#search-form input[name="search"]');
                if (searchInput) searchInput.focus();
            })
            .catch(error => {
                console.error('Error submitting message form:', error);
                alert('Une erreur est survenue lors de la soumission du commentaire.');
            })
            .finally(() => {
                isProcessing = false;
            });
        });
    }

    // Handle search form submission
    const searchForm = document.getElementById('search-form');
    if (searchForm) {
        searchForm.addEventListener('submit', function(event) {
            if (isProcessing) return;
            isProcessing = true;
            event.preventDefault();
            const formData = new FormData(searchForm);
            const searchParams = new URLSearchParams(formData).toString();
            const match = searchForm.action.match(/\/message\/(\d+)\/details/);
            const reclamationId = match ? match[1] : null;

            if (!reclamationId) {
                console.error('Could not extract reclamation ID from URL:', searchForm.action);
                alert('Erreur : Impossible d\'extraire l\'ID de la réclamation.');
                isProcessing = false;
                return;
            }

            fetch(`${searchForm.action}?${searchParams}`, {
                method: 'GET',
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                }
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`Network response was not ok: ${response.status}`);
                }
                return response.text();
            })
            .then(html => {
                const modalBody = document.querySelector('#reclamationModal .modal-body');
                modalBody.innerHTML = html;
                attachFormSubmitHandler();
                const searchInput = document.querySelector('#search-form input[name="search"]');
                if (searchInput) searchInput.focus();
            })
            .catch(error => {
                console.error('Error submitting search form:', error);
                alert('Une erreur est survenue lors de la recherche.');
            })
            .finally(() => {
                isProcessing = false;
            });
        });
    }

    // Handle edit and delete buttons
    modal.addEventListener('click', function(e) {
        if (e.target.classList.contains('edit-message-btn')) {
            e.preventDefault();
            const messageContent = e.target.getAttribute('data-contenu');
            const messageId = e.target.closest('.message-item').getAttribute('data-message-id');
            const editAlert = document.getElementById('edit-mode-alert');
            const editButton = document.getElementById('edit-btn-toggle');
            const textarea = modal.querySelector('#message_contenu');
            const hiddenInput = modal.querySelector('#edit-message-id');

            if (editAlert) editAlert.style.display = 'block';
            if (editButton) editButton.style.display = 'block';
            if (textarea) {
                textarea.value = messageContent;
                textarea.dispatchEvent(new Event('input', { bubbles: true }));
                textarea.focus();
            }
            if (hiddenInput) {
                hiddenInput.value = messageId;
                hiddenInput.dispatchEvent(new Event('change'));
            }
            updateSubmitButton();
        }

        if (e.target.classList.contains('delete-message-btn')) {
            if (isProcessing) return;
            isProcessing = true;
            e.preventDefault();
            const formId = e.target.getAttribute('data-form-id');
            const form = document.getElementById(formId);
            if (form) {
                e.target.classList.add('disabled');
                const submitEvent = new Event('submit', { bubbles: true, cancelable: true });
                form.dispatchEvent(submitEvent);
                setTimeout(() => e.target.classList.remove('disabled'), 1000);
            } else {
                isProcessing = false;
            }
        }
    });

    // Handle delete form submission
    modal.addEventListener('submit', function(e) {
        if (e.target.matches('form[id^="delete-form-"]')) {
            if (isProcessing) return;
            isProcessing = true;
            e.preventDefault();
            const form = e.target;
            const formData = new FormData(form);
            const searchInput = document.querySelector('#search-form input[name="search"]');
            const searchQuery = searchInput ? searchInput.value : '';
            const modalBody = document.querySelector('#reclamationModal .modal-body');

            if (searchQuery) {
                formData.append('search', searchQuery);
            }

            modalBody.innerHTML = '<div class="text-center py-5"><div class="spinner-border"></div></div>';

            fetch(form.action, {
                method: 'POST',
                body: formData,
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                }
            })
            .then(response => {
                if (!response.ok) {
                    return response.json().then(errorData => {
                        throw new Error(errorData.error || `Network response was not ok: ${response.status}`);
                    }).catch(() => {
                        throw new Error(`Network response was not ok: ${response.status}`);
                    });
                }
                return response.text();
            })
            .then(html => {
                modalBody.innerHTML = html;
                attachFormSubmitHandler();
               
                if (searchInput) searchInput.focus();
            })
            .catch(error => {
                console.error('Error deleting message:', error);
                const searchForm = document.getElementById('search-form');
                const reclamationId = searchForm?.action.match(/\/message\/(\d+)\/details/)?.[1];
                if (reclamationId) {
                    fetch(`/message/${reclamationId}/details`, {
                        headers: { 'X-Requested-With': 'XMLHttpRequest' }
                    })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error(`Failed to reload modal: ${response.status}`);
                        }
                        return response.text();
                    })
                    .then(html => {
                        modalBody.innerHTML = html;
                        attachFormSubmitHandler();
                       
                        if (error.message !== 'Message not found' && !error.message.includes('404')) {
                            alert(`Erreur lors de la suppression du message : ${error.message}`);
                        }
                        if (searchInput) searchInput.focus();
                    })
                    .catch(() => {
                        modalBody.innerHTML = '<div class="alert alert-danger">Erreur lors du rechargement du contenu. Veuillez rafraîchir la page.</div>';
                        if (error.message !== 'Message not found' && !error.message.includes('404')) {
                            alert(`Erreur lors de la suppression du message : ${error.message}`);
                        }
                    });
                } else {
                    modalBody.innerHTML = '<div class="alert alert-danger">Erreur : ID de réclamation introuvable. Veuillez rafraîchir la page.</div>';
                    if (error.message !== 'Message not found' && !error.message.includes('404')) {
                        alert(`Erreur lors de la suppression du message : ${error.message}`);
                    }
                }
            })
            .finally(() => {
                isProcessing = false;
            });
        }
    });

    // Handle edit toggle button
    const editToggleButton = document.getElementById('edit-btn-toggle');
    if (editToggleButton) {
        editToggleButton.addEventListener('click', function(e) {
            e.preventDefault();
            document.getElementById('edit-message-id').value = '';
            document.getElementById('message_contenu').value = '';
            const editAlert = document.getElementById('edit-mode-alert');
            const editButton = document.getElementById('edit-btn-toggle');
            if (editAlert) editAlert.style.display = 'none';
            if (editButton) editButton.style.display = 'none';
            updateSubmitButton();
            const textarea = document.querySelector('#message_contenu');
            if (textarea) textarea.focus();
        });
    }

    function updateSubmitButton() {
        const editMessageId = document.getElementById('edit-message-id').value;
        const submitBtn = document.getElementById('submit-btn');
        if (submitBtn) {
            submitBtn.textContent = editMessageId ? 'Mettre à jour' : 'Soumettre';
        }
    }

document.getElementById('google-drive-upload-btn')?.addEventListener('click', function(e) {
    e.preventDefault();
    const uploadBtn = this;
    const statusSpan = document.getElementById('upload-status');

    uploadBtn.disabled = true;
    statusSpan.textContent = "Redirection vers Google pour authentification...";
    statusSpan.className = "ms-2 text-info";

  
    window.location.href = this.href;

 
});

}

            
        });
    </script>
{% endblock %}